const express = require('express')
const mongoose = require('mongoose')
const cors = require('cors')
const bcrypt = require('bcrypt');
const app = express()
app.use(cors())
app.use(express.json())

const UserModel = require('./models/Users')

const db_url ='mongodb+srv://crabnestdev:rmitnguyenvanlinh@crabnest.tygyr.mongodb.net/crabnestdb?retryWrites=true&w=majority&appName=crabNest'

mongoose.connect(db_url, 
    {
        useNewUrlParser: true,
        useUnifiedTopology: true,
    }).then(() => {
        console.log('Connected to MongoDB');
    }).catch((err) => {
        console.error('Error connecting to MongoDB', err);
    }
);

app.get('/getUsers',(req,res)=>{
    UserModel.find()
    .then(users => res.json(users))
    .catch(err => res.json(err))

    console.log("Data");
})

app.post('/getUsers', (req, res) => {
    const newUser = new UserModel({
        name: req.body.name,
        username: req.body.username,
        phoneNum: req.body.phoneNum,
        info: [{ action: req.body.job, place: req.body.place }]
    });

    newUser.save()
        .then(user => res.json(user))
        .catch(err => res.status(400).json('Error: ' + err));
});


app.delete('/getUsers/:id', (req, res) => {
    UserModel.findByIdAndDelete(req.params.id)
        .then(() => res.json({ message: 'User deleted successfully' }))
        .catch(err => res.status(400).json('Error: ' + err));
});


///

app.post('/login', (req, res) => {
    const { username, password } = req.body;

    UserModel.findOne({ username: username })
        .then(user => {
            if (!user) {
                // User not found
                return res.status(400).json({ message: 'User not found' });
            }

            // Compare the provided password directly with the user's name
            if (password === user.name) {
                // Password matches the user's name, login successful
                res.json({ message: 'Login successful', user });
            } else {
                // Password does not match
                res.status(400).json({ message: 'Incorrect password' });
            }
        })
        .catch(err => res.status(500).json('Error: ' + err));
});

app.listen(1414, ()=>{
    console.log("Sever is running")
})